# Grab a field from given input
# Stolen from https://github.com/bahamas10/bash-analysis
#
# $ echo -e '  three    different\tcolumns ' | field 2
# different
field() {
	awk -F "${2:- }" "{ print \$${1:-1} }"
}


# Solution to issue where mac flashes a visual bell on errors
# https://apple.stackexchange.com/questions/25605/how-can-i-stop-my-whole-screen-from-flashing-white-on-errors
# May have to go into System Settings > Accessibility > Audio and re-disable option
killvisualbell () {
	sudo killall coreaudiod
}

# List hardware and interface info
machardwarelist () {
	networksetup -listallhardwareports
}

install-kubectl () {
	local version=$1
	if curl -sS -L -o /tmp/kubectl "https://dl.k8s.io/release/v${version}/bin/darwin/arm64/kubectl"
	then
		chmod +x /tmp/kubectl
		sudo mv /tmp/kubectl /usr/local/bin/kubectl
	fi
}

yqget () {
	: "${1:?Must specify a key to get}"
	yq '.. | select(has("'"$1"'")) | .'"$1"
}

openssl.cert() {
	tmpfile=$(mktemp)
	cat > ${tmpfile} # put stdin into temp file
	openssl crl2pkcs7 -nocrl -certfile "$tmpfile" | openssl pkcs7 -print_certs -text -noout
	rm ${tmpfile}
}

openssl.summary() {
	tmpfile=$(mktemp)
	cat > ${tmpfile} # put stdin into temp file
	openssl crl2pkcs7 -nocrl -certfile "$tmpfile" | openssl pkcs7 -print_certs -noout
	rm ${tmpfile}
}

hl() {
	grep --color=always -e "^" -e "$1"
}

# capture the output of a command so it can be retrieved with ret
cap () { tee /tmp/capture.out; }
cap0 () { tee /tmp/capture.out; }
cap1 () { tee /tmp/capture1.out; }
cap2 () { tee /tmp/capture2.out; }
cap3 () { tee /tmp/capture3.out; }

# return the output of the most recent command that was captured by cap
ret () { cat /tmp/capture.out; }
ret0 () { cat /tmp/capture.out; }
ret1 () { cat /tmp/capture1.out; }
ret2 () { cat /tmp/capture2.out; }
ret3 () { cat /tmp/capture3.out; }

# Sort input by age (ex: 1d, 2h, 3m, 4s)
# Very helpful with kubectl output
# TODO: Does not properly handle mixed units (ex: 3h12m)
sort_by_age() {
    local col="$1"
    if [[ -z "$col" ]]; then
        echo "Usage: sort_by_age <column_number>" >&2
        return 1
    fi

    awk -v col="$col" '
    function to_sec(val) {
        n = substr(val, 1, length(val)-1)
        u = substr(val, length(val), 1)
        if (u == "d") return n * 86400
        if (u == "h") return n * 3600
        if (u == "m") return n * 60
        if (u == "s") return n
        return 0
    }

    {
        age = $col
        print to_sec(age), $0
    }
    ' | sort -n | cut -d' ' -f2-
}
