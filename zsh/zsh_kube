# Auto Complete
alias k=kubectl
[[ /usr/local/bin/kubectl ]] && source <(kubectl completion zsh)

# Set up krew plugin support
export PATH="${KREW_ROOT:-$HOME/.krew}/bin:$PATH"

# Alias
alias kl="kubectl logs"
alias klog="kubectl log"

alias kn="kubens"
alias wk="watch kubectl "
alias kapi="kubectl api-resources | fzf"
alias kapim="kubectl api-resources | fzf -m"

alias kg="kubectl get"
alias kgo="kubectl get -oyaml"
alias kd="kubectl describe"

alias kdebugpod="kubectl run -i --tty --rm debug --image=nicolaka/netshoot --restart=Never"
alias kgetevents="kubectl get events --sort-by='.lastTimestamp'"

# Smart switcher for k8s context.
# Place configs in ~/kube/configs/ with names in form kubeconfig-{{name}}.yaml
#
# With no arguments, will fuzzy find through your configs.
# kc [name] will select by name. (Ex. kc qa -> selects kubeconfig-qa.yaml)
# kc - Will jump back to your most recently visited cluster
kc() {

	local kubeconfigs=~/.kube/configs
	local config
	# fzf select filename
	if [[ -z "$1" ]] ; then
		config=$(ls -1 ${kubeconfigs} | grep 'kube' | fzf)

		# Do nothing if fzf is exited
		if [ -z "$config" ]; then
			echo "No context selected"
			return
		fi
	fi

	# Use previous config
	if [[ "$1" = "-" ]] ; then
		config=$(ls -1t ${kubeconfigs} | head -n2 | tail -n1 )
	fi

	# Support selecting as an argument
	if [[ -f "${kubeconfigs}/kubeconfig-${1}.yaml" ]]; then
		config="kubeconfig-${1}.yaml"
	fi

	export KUBECONFIG=${kubeconfigs}/${config}
	# Touching the file makes list by last modify timestamp useful
	touch "${KUBECONFIG}"
}

kgetpodsonnode () {
        kubectl get pods -A --field-selector spec.nodeName="$1"
}

kgetpodsonnodewide () {
        kubectl get pods -A -owide --field-selector spec.nodeName="$1"
}

kgetnotrunningpods () {
        kubectl get pods | grep -v Running | grep -v Completed
}

# Get all resources by greping k api-resource output
kgetallbyname () {
	if [ -z "$1" ]; then
		echo "Usage: $0 <resource-group>"
		echo "Example: $0 apps"
		exit 1
	fi

	# List of possible resource kinds in the specified group
	# Note: Adjust this list for specific Kubernetes resource groups
	RESOURCES=$(kubectl api-resources --no-headers | grep "$1" | awk '{print $1}')

	if [ -z "$RESOURCES" ]; then
		echo "No resources found: $RESOURCES"
		exit 1
	fi

	echo "$RESOURCES" | while IFS= read -r RESOURCE; do
		echo ~~~~Getting "$RESOURCE"~~~~
		k get "$RESOURCE" -owide
	done
}

# Get all resources in namespace by api-resources available
kgetallforreal() {
  namespaceName=$1
  kubectl api-resources --namespaced=true --verbs=list -o name | grep -v '^events\.events\.k8s\.io$' | grep -v '^events$' | xargs echo | tr ' ' ',' | xargs kubectl get -n "${namespaceName}"
}

# FZF select an ingress host to open
kopeningress () {
	# Grab names, split on comma, fuzzy find, and add protocol
	kubectl get ingress --no-headers | awk '{print $3}' | sed 's/,/\
/g' | fzf | awk '{print "http://"$0}' | xargs open

}
